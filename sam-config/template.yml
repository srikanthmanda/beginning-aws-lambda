# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Beginning AWS Lambda: An exercise in learning basics of Lambda.

Transform:
  - AWS::Serverless-2016-10-31

Resources:
  awsDocsRepo:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: awsDocsRepoBucketName
      AccessControl: Private

  getAwsDocsRepo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getAwsDocsRepo
      Handler: src/get-awsdocs-repo.handler
      Description: Fetches AWS Docs repo from GitHub and uploads it to S3.
      Environment:
        Variables:
          AWS_DOCS_REPO_BUCKET:
            Ref: awsDocsRepoBucketName
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess

  unzipRepoArchive:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: unzipRepoArchive
      Handler: src/unzip-repo-archive.handler
      Description: Reads AWS Docs repo from S3 and extracts it to EFS.
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
      Events:
        awsDocsRepoUpdate:
          Type: S3
          Properties:
            Bucket: !Ref awsDocsRepo
            Events:
              - s3:ObjectCreated:Put
              - s3:ObjectCreated:Post
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: aws-cloudformation-user-guide
                  - Name: suffix
                    Value: zip
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 2
        DestinationConfig:
          OnSuccess:
            Type: SNS
            Destination: !Ref unzipRepoArchiveSuccessfulInvocations
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3ReadOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - AmazonElasticFileSystemClientFullAccess
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${lambdaEfsStack}-secgroup-id"
        SubnetIds:
          - Fn::ImportValue: !Sub "${lambdaEfsStack}-subnet-id"
      FileSystemConfigs:
        - Arn:
            Fn::ImportValue: !Sub "${lambdaEfsStack}-access-pt-arn"
          LocalMountPath: /mnt/efs

  unzipRepoArchiveSuccessfulInvocations:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: unzipRepoArchiveSuccessEvents
      TopicName: unzipRepoArchiveSuccessEvents

  createAttrFilesSuccessEvents:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: createAttrFilesSuccessEvents
      VisibilityTimeout: 200
      MessageRetentionPeriod: 300

  createAttributeFiles:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createAttributeFiles
      Handler: src/create-attribute-files.handler
      Description: Reads AWS Docs repo folder from EFS and creates CloudFormation attribute files in another EFS folder.
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
          SUCC_NOTIFY_SQS: !Ref createAttrFilesSuccessEvents
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AmazonElasticFileSystemClientFullAccess
        - AmazonSQSFullAccess
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${lambdaEfsStack}-secgroup-id"
        SubnetIds:
          - Fn::ImportValue: !Sub "${lambdaEfsStack}-subnet-id"
      FileSystemConfigs:
        - Arn:
            Fn::ImportValue: !Sub "${lambdaEfsStack}-access-pt-arn"
          LocalMountPath: /mnt/efs

  createAttributeFilesInvoker:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt createAttributeFiles.Arn
      Protocol: lambda
      TopicArn: !Ref unzipRepoArchiveSuccessfulInvocations

  createAttributeFilesInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref createAttributeFiles
      Principal: sns.amazonaws.com

  generateCheatSheet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: generateCheatSheet
      Handler: src/generate-cheat-sheet.handler
      Description: Reads CloudFormation attribute files from EFS, creates a cheatsheet and uploads it to S3.
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
          AWS_CFN_ATTRS_CHEATSHEET_SITE: !Ref awsCfnAttrsCheatSheetSiteName
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess
        - AWSLambdaVPCAccessExecutionRole
        - AmazonElasticFileSystemClientFullAccess
        - AWSLambdaSQSQueueExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${lambdaEfsStack}-secgroup-id"
        SubnetIds:
          - Fn::ImportValue: !Sub "${lambdaEfsStack}-subnet-id"
      FileSystemConfigs:
        - Arn:
            Fn::ImportValue: !Sub "${lambdaEfsStack}-access-pt-arn"
          LocalMountPath: /mnt/efs

  generateCheatSheetEventSource:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt createAttrFilesSuccessEvents.Arn
      FunctionName: !GetAtt generateCheatSheet.Arn

  awsCfnAttrsCheatSheetSite:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref awsCfnAttrsCheatSheetSiteName
      WebsiteConfiguration:
        ErrorDocument: 404.html
        IndexDocument: index.md

Globals:
  Function:
    CodeUri: ../sam-build/beginning-lambda.zip
    Runtime: nodejs12.x
    MemorySize: 256
    Timeout: 180
    Layers:
      - Fn::ImportValue: !Sub "${awsSdkLayerStack}-arn"

Parameters:
  awsDocsRepoBucketName:
    Description: Name of the S3 bucket to store AWS docomentation repo.
    Type: String
    AllowedPattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-5][0-9a-fA-F]{3}-[089abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
  awsSdkLayerStack:
    Description: Stack name of the Lambda layer with Node.js AWS SDK
    Type: String
    Default: lib-aws-sdk
  lambdaEfsStack:
    Description: Lambda EFS stack name
    Type: String
    Default: lambda-efs-vpc
  awsCfnAttrsCheatSheetSiteName:
    Description: Name of the S3 website bucket to store AWS CloudFormation Attributes cheatsheet.
    Type: String
    Default: aws-cloudformation-attributes-cheatsheet
